---
import Card from '../../components/Card.astro';

export async function getStaticPaths() {
  const allPosts = await Astro.glob('../**/*.md');

  let tags = new Set(allPosts.flatMap(post => post.frontmatter.tags));
  tags = Array.from(tags);
  tags = tags.filter(element => element !== undefined);

  const paths = tags.map(tag => {    
    return {
      params: { tag },
    };
  });

  return paths;
}

const { tag } = Astro.params;

// Since we cannot share allPosts between getStaticPaths and the component,
// we need to fetch them again here for filtering
let filteredPosts = (await Astro.glob('../**/*.md')).filter(post => post.frontmatter.tags && post.frontmatter.tags.includes(tag));

let allPostsIncludingMultipleDates = [];

filteredPosts.forEach((p) => {
  let baseData = Object.assign({}, p.frontmatter, {url: p.url});  // Create a copy of the base data

  if (baseData.eventDates) {
    baseData.eventDates.forEach((date, i) => {
      const again = Object.assign({}, baseData, {pubDate: date, title: `${baseData.title} - Day ${i + 1}`, url: `${baseData.url}/${date}`}); 

      allPostsIncludingMultipleDates.push(again);
    })
  } else {
    allPostsIncludingMultipleDates.push(baseData); // Push base data if no eventDates
  }
});

const today = new Date();
today.setDate(today.getDate() - 1);  // Move back by one day
today.setHours(0,0,0,0);

allPostsIncludingMultipleDates = allPostsIncludingMultipleDates.filter(post => new Date(post.pubDate) >= today);
---

<html>
  <head>
  </head>
  <body>
    <ul>
      {allPostsIncludingMultipleDates.map(p => <div class="col-span-1">
        <Card post={p} />
      </div>)}
    </ul>
  </body>
</html>
